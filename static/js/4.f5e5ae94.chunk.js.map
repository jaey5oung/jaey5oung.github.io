{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TabContent","useEffect","스위치변경","누른탭","Info","재고","connect","state","reducer","alert열렸니","reducer2","useState","alert","alert변경","input변경","누른탭변경","스위치","타이머","setTimeout","clearTimeout","id","useParams","찾은상품","shoes","find","상품","history","useHistory","className","onChange","e","target","value","src","picture","style","width","title","content","price","onClick","재고변경","dispatch","type","payload","name","quan","push","goBack","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"qNASIA,EAAKC,IAAOC,IAAV,8CAIFC,EAAKF,IAAOG,GAAV,+DAEK,SAACC,GAAD,OAAWA,EAAMC,gBA4G5B,SAASC,EAAWF,GAKlB,OAJAG,qBAAU,WACRH,EAAMI,gCAAM,MAGI,IAAdJ,EAAMK,mBACD,+EACgB,IAAdL,EAAMK,mBACR,oFACEL,EAAMK,mBAKnB,SAASC,EAAKN,GACZ,OAAO,gDAASA,EAAMO,aAAG,MAUZC,uBAPf,SAAsBC,GACpB,MAAO,CACLA,MAAOA,EAAMC,QACbC,0BAAUF,EAAMG,YAILJ,EAlIf,SAAgBR,GAAQ,IAAD,EACEa,oBAAS,GADX,mBAChBC,EADgB,KACTC,EADS,OAEEF,mBAAS,IAFX,mBAETG,GAFS,aAGFH,mBAAS,GAHP,mBAGhBR,EAHgB,KAGXY,EAHW,OAIFJ,oBAAS,GAJP,mBAIhBK,EAJgB,KAIXd,EAJW,KAMrBD,qBAAU,WAER,IAAIgB,EAAMC,YAAW,WACnBL,GAAQ,KACP,KACH,OAAO,WACLM,aAAaF,MAId,CAACL,IAhBiB,IAmBfQ,EAAOC,cAAPD,GACFE,EAAOxB,EAAMyB,MAAMC,MAAK,SAACC,GAC3B,OAAOA,EAAGL,IAAMA,KAEdM,EAAUC,cAEd,OACE,sBAAKC,UAAU,YAAf,UACE,cAACnC,EAAD,UACE,cAACG,EAAD,+CAEF,uBACEiC,SAAU,SAACC,GACThB,EAAQgB,EAAEC,OAAOC,WAGV,IAAVpB,EACC,qBAAKgB,UAAU,WAAf,SACE,8GAEA,KAEJ,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKK,IAAKX,EAAKY,QAASC,MAAO,CAAEC,MAAO,YAE1C,sBAAKR,UAAU,gBAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBN,EAAKe,QAC3B,4BAAIf,EAAKgB,UACT,4BAAIhB,EAAKiB,QACT,cAACnC,EAAD,CAAMC,eAAIP,EAAMO,eAChB,wBACEuB,UAAU,iBACVY,QAAS,WACP1C,EAAM2C,yBAAK,CAAC,EAAG,GAAI,KACnB3C,EAAM4C,SAAS,CACbC,KAAM,2BACNC,QAAS,CAAExB,GAAIE,EAAKF,GAAIyB,KAAMvB,EAAKe,MAAOS,KAAM,KAElDpB,EAAQqB,KAAK,cARjB,sCALF,OAmBE,wBACEnB,UAAU,iBACVY,QAAS,WACPd,EAAQsB,UAHZ,4CAUJ,eAAC,IAAD,CAAKpB,UAAU,OAAOqB,QAAQ,OAAOC,iBAAiB,SAAtD,UACE,cAAC,IAAIC,KAAL,UACE,cAAC,IAAIC,KAAL,CACEC,SAAS,SACTb,QAAS,WACPtC,GAAM,GACNa,EAAM,IAJV,sBAUF,cAAC,IAAIoC,KAAL,UACE,cAAC,IAAIC,KAAL,CACEC,SAAS,SACTb,QAAS,WACPtC,GAAM,GACNa,EAAM,IAJV,2BAWJ,cAAC,IAAD,CAAeuC,GAAItC,EAAKuC,WAAW,MAAMC,QAAS,IAAlD,SACE,cAACxD,EAAD,CAAYG,qBAAKA,EAAKD,iCAAOA","file":"static/js/4.f5e5ae94.chunk.js","sourcesContent":["/* eslint-disable */\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport './Detail.scss';\nimport { Nav } from 'react-bootstrap';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nlet 박스 = styled.div`\n  padding: 20px;\n`;\n\nlet 제목 = styled.h4`\n  font-size: 25px;\n  color: ${(props) => props.색상};\n`;\n\nfunction Detail(props) {\n  let [alert, alert변경] = useState(true);\n  let [input, input변경] = useState('');\n  let [누른탭, 누른탭변경] = useState(0);\n  let [스위치, 스위치변경] = useState(false);\n\n  useEffect(() => {\n    //2초 후에 저거 alert 창을 안보이게 해주셈\n    let 타이머 = setTimeout(() => {\n      alert변경(false);\n    }, 2000);\n    return () => {\n      clearTimeout(타이머);\n    };\n    // return function 어쩌구(){실행할코드}\n    //리턴뒤에잇는것 사라질때 쓰는코드\n  }, [alert]);\n  //[]안에 조건을 적는것인데 이때 alert를 넣으면 alert스테잇이 변경될때만 실행된다 만약 []안에 아무것도 적지않으면 페이지가 로드될때만 실행된다 일종의 트릭\n\n  let { id } = useParams();\n  let 찾은상품 = props.shoes.find((상품) => {\n    return 상품.id == id;\n  });\n  let history = useHistory();\n  //find array안에서 원하는 자료를 찾고싶을때 사용한다\n  return (\n    <div className=\"container\">\n      <박스>\n        <제목>상세페이지</제목>\n      </박스>\n      <input\n        onChange={(e) => {\n          input변경(e.target.value);\n        }}\n      />\n      {alert === true ? (\n        <div className=\"my-alert\">\n          <p>재고가 얼마 남지 않았습니다</p>\n        </div>\n      ) : null}\n\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <img src={찾은상품.picture} style={{ width: '100%' }} />\n        </div>\n        <div className=\"col-md-6 mt-4\">\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\n          <p>{찾은상품.content}</p>\n          <p>{찾은상품.price}</p>\n          <Info 재고={props.재고}></Info>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.재고변경([9, 10, 11]);\n              props.dispatch({\n                type: '항목추가',\n                payload: { id: 찾은상품.id, name: 찾은상품.title, quan: 1 },\n              });\n              history.push('./Cart.js');\n            }}\n          >\n            주문하기\n          </button>\n          &nbsp;\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              history.goBack();\n            }}\n          >\n            뒤로가기\n          </button>\n        </div>\n      </div>\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-0\"\n            onClick={() => {\n              스위치변경(false);\n              누른탭변경(0);\n            }}\n          >\n            Active\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-1\"\n            onClick={() => {\n              스위치변경(false);\n              누른탭변경(1);\n            }}\n          >\n            Option 2\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n      <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\n        <TabContent 누른탭={누른탭} 스위치변경={스위치변경} />\n      </CSSTransition>\n    </div>\n  );\n}\n\nfunction TabContent(props) {\n  useEffect(() => {\n    props.스위치변경(true);\n  });\n\n  if (props.누른탭 === 0) {\n    return <div>0번째 내용입니다</div>;\n  } else if (props.누른탭 === 1) {\n    return <div>1번째 내용입니다</div>;\n  } else if (props.누른탭 === 2) {\n    <div>2번째 내용입니다</div>;\n  }\n}\n\nfunction Info(props) {\n  return <p>재고 : {props.재고[0]}</p>;\n}\n\nfunction state를props화(state) {\n  return {\n    state: state.reducer,\n    alert열렸니: state.reducer2,\n  };\n}\n\nexport default connect(state를props화)(Detail);\n"],"sourceRoot":""}